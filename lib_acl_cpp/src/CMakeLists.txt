cmake_minimum_required(VERSION 2.8)
#set(CMAKE_BUILD_TYPE Release)
set(CMAKE_BUILD_TYPE Release CACHE STRING "set build type to release")

#add_definitions("-g")
add_definitions("-W")
add_definitions("-O3")
add_definitions("-Wall")
add_definitions("-Werror")
add_definitions("-Wshadow")
add_definitions("-Wformat")
add_definitions("-Wpointer-arith")
add_definitions("-D_REENTRANT")
add_definitions("-D_USE_FAST_MACRO")
add_definitions("-Wno-long-long")
add_definitions("-Wuninitialized")
add_definitions("-D_POSIX_PTHREAD_SEMANTICS")
add_definitions("-DHAS_MYSQL_DLL")
add_definitions("-DHAS_SQLITE_DLL")
add_definitions("-Wno-invalid-source-encoding")
add_definitions("-Wno-unused-private-field")
add_definitions("-Wno-unused-parameter")
add_definitions("-Wno-unused-const-variable")
add_definitions("-fexceptions")
add_definitions("-DACL_ARM_LINUX")

if (CMAKE_SYSTEM_NAME MATCHES "Linux")
	add_definitions("-DLINUX2")
	add_definitions("-fPIC")
endif()

set(rpath lib_acl_cpp)
set(src ${PROJECT_SOURCE_DIR}/${rpath}/src)
set(acl_path ${PROJECT_SOURCE_DIR}/lib_acl)
set(acl_include ${acl_path}/include)
set(proto_path ${PROJECT_SOURCE_DIR}/lib_protocol)
set(proto_include ${proto_path}/include)
set(mysql_include ${PROJECT_SOURCE_DIR}/include/mysql)
set(sqlite_include ${PROJECT_SOURCE_DIR}/include/sqlite)

include_directories(${mysql_include})
include_directories(${sqlite_include})
include_directories(${acl_include})
include_directories(${proto_include})
include_directories(${PROJECT_SOURCE_DIR}/${rpath}/src)
include_directories(${PROJECT_SOURCE_DIR}/${rpath}/include)

aux_source_directory(${src} lib_src)
aux_source_directory(${src}/aliyun lib_src)
aux_source_directory(${src}/beanstalk lib_src)
aux_source_directory(${src}/connpool lib_src)
aux_source_directory(${src}/db lib_src)
aux_source_directory(${src}/disque lib_src)
aux_source_directory(${src}/event lib_src)
aux_source_directory(${src}/hsocket lib_src)
aux_source_directory(${src}/http lib_src)
aux_source_directory(${src}/ipc lib_src)
aux_source_directory(${src}/master lib_src)
aux_source_directory(${src}/memcache lib_src)
aux_source_directory(${src}/mime lib_src)
aux_source_directory(${src}/mime/internal lib_src)
aux_source_directory(${src}/queue lib_src)
aux_source_directory(${src}/redis lib_src)
aux_source_directory(${src}/serialize lib_src)
aux_source_directory(${src}/session lib_src)
aux_source_directory(${src}/smtp lib_src)
aux_source_directory(${src}/stdlib lib_src)
aux_source_directory(${src}/stream lib_src)

set(lib_output_path ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${lib_output_path})
SET(CMAKE_SHARED_LINKER_FLAGS "-Wl,-rpath,. -L${lib_output_path} -l_protocol -l_acl")
add_library(_acl_cpp SHARED ${lib_src})
link_directories(${PROJECT_BINARY_DIR}/lib)
target_link_libraries(_acl_cpp _protocol _acl)
